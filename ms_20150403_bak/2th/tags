!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
E_MAX	test_2_my.c	5;"	d	file:
N	c_complete_test.c	4;"	d	file:
N	test_2.cpp	9;"	d	file:
N	test_2_init.c	2;"	d	file:
N	test_2_my.c	4;"	d	file:
N	test_2_my_1.c	4;"	d	file:
__anon1::count	c_complete_test.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon1	file:	access:public
__anon1::e	c_complete_test.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon1	file:	access:public
__anon1::k	c_complete_test.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon1	file:	access:public
__anon1::s	c_complete_test.c	/^	int s;					\/\/触发信号$/;"	m	struct:__anon1	file:	access:public
__anon2::count	test_2_my_1.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon2	file:	access:public
__anon2::e	test_2_my_1.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon2	file:	access:public
__anon2::k	test_2_my_1.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon2	file:	access:public
__anon2::s	test_2_my_1.c	/^	int s;					\/\/触发信号$/;"	m	struct:__anon2	file:	access:public
__anon3::count	test_2_my.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon3	file:	access:public
__anon3::e	test_2_my.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon3	file:	access:public
__anon3::k	test_2_my.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon3	file:	access:public
__anon3::s	test_2_my.c	/^	int s;		\/\/触发信号$/;"	m	struct:__anon3	file:	access:public
cnt	c_complete_test.c	/^int cnt[N];	\/\/每个模块被触发的次数$/;"	v
cnt	test_2.cpp	/^int cnt[N];	\/\/每个模块被触发的次数$/;"	v
cnt	test_2_init.c	/^int cnt[N];	\/\/每个模块被触发的次数$/;"	v
cnt	test_2_my.c	/^int cnt[N];	\/\/每个模块被触发的次数$/;"	v
cnt	test_2_my_1.c	/^int cnt[N];	\/\/每个模块被触发的次数$/;"	v
count	c_complete_test.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon1	file:	access:public
count	test_2_my.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon3	file:	access:public
count	test_2_my_1.c	/^	int count;				\/\/被触发次数	$/;"	m	struct:__anon2	file:	access:public
e	c_complete_test.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon1	file:	access:public
e	c_complete_test.c	/^int e[N][3];\/\/模块N的输出，最多有3个$/;"	v
e	test_2.cpp	/^int e[N][3];\/\/模块N的输出，最多有3个$/;"	v
e	test_2_init.c	/^int e[N][3];\/\/模块N的输出，最多有3个$/;"	v
e	test_2_my.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon3	file:	access:public
e	test_2_my.c	/^int e[N][3];\/\/模块N的输出，最多有3个$/;"	v
e	test_2_my_1.c	/^	int e[3];				\/\/输出信号$/;"	m	struct:__anon2	file:	access:public
e	test_2_my_1.c	/^int e[N][3];\/\/模块N的输出，最多有3个$/;"	v
k	c_complete_test.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon1	file:	access:public
k	c_complete_test.c	/^int k[N];	\/\/每个模块输出个数 $/;"	v
k	test_2.cpp	/^int k[N];	\/\/每个模块输出个数 $/;"	v
k	test_2_init.c	/^int k[N];	\/\/每个模块输出个数 $/;"	v
k	test_2_my.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon3	file:	access:public
k	test_2_my.c	/^int k[N];	\/\/每个模块输出个数 $/;"	v
k	test_2_my_1.c	/^	int k;					\/\/输出个数$/;"	m	struct:__anon2	file:	access:public
k	test_2_my_1.c	/^int k[N];	\/\/每个模块输出个数 $/;"	v
main	c_complete_test.c	/^int main()$/;"	f
main	test_2.cpp	/^int main()$/;"	f	signature:()
main	test_2_init.c	/^int main()$/;"	f
main	test_2_my.c	/^int main()$/;"	f
main	test_2_my_1.c	/^int main()$/;"	f
module	c_complete_test.c	/^module_typedef module[N];$/;"	v
module	test_2_my.c	/^module_typedef module[N];$/;"	v
module	test_2_my_1.c	/^module_typedef module[N];$/;"	v
module_typedef	c_complete_test.c	/^module_typedef;$/;"	t	typeref:struct:__anon1	file:
module_typedef	test_2_my.c	/^module_typedef;$/;"	t	typeref:struct:__anon3	file:
module_typedef	test_2_my_1.c	/^module_typedef;$/;"	t	typeref:struct:__anon2	file:
n	c_complete_test.c	/^int n;					\/\/模块个数$/;"	v
n	test_2_my.c	/^int n;					\/\/模块个数$/;"	v
n	test_2_my_1.c	/^int n;					\/\/模块个数$/;"	v
s	c_complete_test.c	/^	int s;					\/\/触发信号$/;"	m	struct:__anon1	file:	access:public
s	c_complete_test.c	/^int s[N];	\/\/每个模块的触发信号$/;"	v
s	test_2.cpp	/^int s[N];	\/\/每个模块的触发信号$/;"	v
s	test_2_init.c	/^int s[N];	\/\/每个模块的触发信号$/;"	v
s	test_2_my.c	/^	int s;		\/\/触发信号$/;"	m	struct:__anon3	file:	access:public
s	test_2_my.c	/^int s[N];	\/\/每个模块的触发信号$/;"	v
s	test_2_my_1.c	/^	int s;					\/\/触发信号$/;"	m	struct:__anon2	file:	access:public
s	test_2_my_1.c	/^int s[N];	\/\/每个模块的触发信号$/;"	v
signal	test_2.cpp	/^int signal;$/;"	v
signal	test_2_init.c	/^int signal;$/;"	v
signal_init	c_complete_test.c	/^int signal_init[N];	\/\/初始信号$/;"	v
signal_init	test_2_my.c	/^int signal_init[N];	\/\/初始信号$/;"	v
signal_init	test_2_my_1.c	/^int signal_init[N];	\/\/初始信号$/;"	v
signal_triger	c_complete_test.c	/^int signal_triger(int signal)$/;"	f	signature:(int signal)
signal_triger	test_2_my.c	/^int signal_triger(int signal)$/;"	f	signature:(int signal)
signal_triger	test_2_my_1.c	/^int signal_triger(int signal)$/;"	f	signature:(int signal)
std	test_2_init.c	/^using namespace std;$/;"	v
