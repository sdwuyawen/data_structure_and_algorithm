/*
 * =====================================================================================
 *
 *       Filename:  203.c
 *
 *    Description:  
 *
 *        Version:  1.0
 *        Created:  04/23/2015 03:25:46 PM
 *       Revision:  none
 *       Compiler:  gcc
 *
 *         Author:  YOUR NAME (), 
 *   Organization:  
 *
 * =====================================================================================
 */
#include <stdlib.h>
#include <stdio.h>

/**

 * Definition for singly-linked list.

 * struct ListNode {

 *     int val;

 *     struct ListNode *next;

 * };

*/
struct ListNode 
{
	int val;
	struct ListNode *next;
};


struct ListNode* removeElements(struct ListNode* head, int val) 
{

	struct ListNode *list;
	struct ListNode *pre;

	if(head == NULL)
		return NULL;

	pre = head;
	list = head->next;

	while(list != NULL)
	{
		if(list->val == val)
		{
			//remove this node
			pre->next = list->next;
//            free(list);
		}
		pre = list;   
		list = list->next;
	}

	return head;
}

struct ListNode* insertElements(struct ListNode* head, int val) 
{

	struct ListNode *list;
	struct ListNode *temp;

	list = malloc(sizeof(struct ListNode));
	list->val = val;

	temp = head->next;
	head->next = list;
	list->next = temp;
}

struct ListNode* printList(struct ListNode* head) 
{
	struct ListNode *list;
	list = head->next;
	int i = 0;

	while(list != NULL)
	{
		printf("node %d: %d\n", i++,list->val);
		list = list->next;
	}
}


int main(void)
{
	struct ListNode *listhead;
	
	listhead = malloc(sizeof(struct ListNode));
	listhead->next = NULL;

	insertElements(listhead, 1);
	insertElements(listhead, 2);
	insertElements(listhead, 3);
	insertElements(listhead, 4);
	insertElements(listhead, 5);
	insertElements(listhead, 6);

	printList(listhead);

	printf("delete 3\n");
	removeElements(listhead, 3);
	printList(listhead);

	printf("delete 6\n");
	removeElements(listhead, 6);
	printList(listhead);
	
	printf("delete 1\n");
	removeElements(listhead, 1);
	printList(listhead);



	return 0;

}
